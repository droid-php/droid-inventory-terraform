<?php

namespace Droid\Inventory\Terraform\Command;

use RuntimeException;

use Droid\Model\Inventory\Inventory;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class GenerateCommand extends Command
{
    protected $inventory;

    public function configure()
    {
        $this->setName('inventory:terraform')
            ->setDescription('Generate inventory.terraform.yml file from a terrafile.tfstate')
        ;
    }

    public function execute(InputInterface $input, OutputInterface $output)
    {
        $inputFilename = 'terraform.tfstate';
        $outputFilename = 'inventory.terraform.yml';
        
        if (!file_exists($inputFilename)) {
            throw new RuntimeException("Can't find input file: " . $inputFilename);
        }
        if (file_exists($outputFilename)) {
            throw new RuntimeException("Output file already exists (delete it if you want it to be regenerated): " . $outputFilename);
        }

        $output->writeLn("Generating " . $outputFilename . " from " . $inputFilename);
        $json = file_get_contents($inputFilename);
        $data = json_decode($json, true);
        //print_r($data);
        
        $yaml = "---\n";
        $yaml .= "###########################################################\n";
        $yaml .= "# This file is generated by droid-inventory-terraform\n";
        $yaml .= "# Don't edit this file directly, as your changes would be\n";
        $yaml .= "# overwritten on the next run\n";
        $yaml .= "###########################################################\n";
        //file_put_contents($outputFilename, $yaml);
        $yaml .= "hosts:\n";
        $resourceData = $data['modules'][0]['resources'];
        $groupMap = [];
        foreach ($resourceData as $key => $details) {
            if ($details['type'] == 'linode_linode') {
                $attributes = $details['primary']['attributes'];
                $name = $attributes['name'];
                $groupNames = explode(', ', $attributes['group']);
                $yaml .= "  " . $name . ":\n";
                //$yaml .= "    region: \"" . $attributes['region'] . "\"\n";
                if (isset($attributes['ip_address'])) {
                    $yaml .= "    public_ip: " . $attributes['ip_address'] . "\n";
                }
                if (isset($attributes['private_ip_address'])) {
                    $yaml .= "    private_ip: " . $attributes['private_ip_address'] . "\n";
                }
                foreach ($groupNames as $groupName) {
                    $groupMap[$groupName][] = $name;
                }
            }
        }
        
        
        $yaml .= "groups:\n";
        foreach ($groupMap as $name => $hostNames) {
            $yaml .= "  $name:\n";
            $yaml .= "    hosts:\n";
            foreach ($hostNames as $hostName) {
                $yaml .= "      - $hostName\n";
            }
        }
        //echo $yaml;
        file_put_contents($outputFilename, $yaml);
    }
}
